# 프로젝트 구조 분석: time-auction

## 1. 개요

이 프로젝트는 **Java Spring Boot**를 기반으로 구축된 **실시간 경매 게임 애플리케이션**입니다. 주요 기술 스택으로 **WebSocket**과 **Redis**를 사용하여 실시간 통신 및 데이터 처리를 구현하고 있습니다. 전체적으로 기능별로 패키지가 잘 분리된 모듈식 구조를 가지고 있습니다.

- **언어/프레임워크**: Java, Spring Boot
- **빌드 도구**: Gradle
- **핵심 기술**: WebSocket, Redis (Pub/Sub, Repository)
- **주요 기능**: 사용자, 게임방, 게임, 입찰 관리


## 2. 주요 디렉토리 구조 (텍스트 다이어그램)

프로젝트의 핵심 로직은 `src/main/java/com/jhpark/time_auction` 내에 위치합니다.

```
src
└── main
    ├── java
    │   └── com
    │       └── jhpark
    │           └── time_auction
    │               ├── TimeAuctionApplication.java  // Spring Boot 메인 애플리케이션
    │               │
    │               ├── bid/                      // 입찰 관련 기능
    │               │   ├── contoller/
    │               │   ├── model/
    │               │   └── service/
    │               │
    │               ├── room/                     // 게임 대기방 기능
    │               │   ├── contoller/
    │               │   ├── model/
    │               │   ├── repository/
    │               │   └── service/
    │               │
    │               ├── game/                     // 게임 로직 및 상태 관리
    │               │   ├── contoller/
    │               │   ├── model/
    │               │   ├── repository/
    │               │   └── service/
    │               │
    │               ├── user/                     // 사용자 정보
    │               │   ├── model/
    │               │   ├── repository/
    │               │   └── service/
    │               │
    │               └── common/                   // 공통 기능 및 설정
    │                   ├── redis/                // Redis를 활용한 실시간 기능의 핵심
    │                   │   ├── config/           // Redis 연결 설정
    │                   │   ├── handler/          // Redis 기반의 핵심 로직 핸들러
    │                   │   │   ├── broadcast/    // Redis Pub/Sub - 메시지 수신 및 전파
    │                   │   │   └── publish/      // Redis Pub/Sub - 메시지 발행
    │                   │   ├── model/
    │                   │   ├── router/           // 메시지 라우팅
    │                   │   └── util/
    │                   │
    │                   └── ws/                   // WebSocket 통신 관련 설정 및 핸들러
    │                       ├── config/           // WebSocket 연결(endpoint) 설정
    │                       ├── handler/          // WebSocket 이벤트 처리
    │                       └── model/            // WebSocket 메시지(in/out) 모델
    │
    └── resources
        └── application.yml                     // 애플리케이션 주요 설정 (DB, Redis 등)
```

## 3. 주요 아키텍처 특징

- **이벤트 기반(Event-Driven) 통신**: 클라이언트와 서버는 WebSocket을 통해 `ClientEvent`와 `ServerEvent`를 주고받으며 통신합니다. 이는 실시간 상호작용의 핵심입니다.

- **Redis 중심의 상태 관리**:
    - **Repository**: `Game`, `Room`, `User` 등의 주요 도메인 데이터를 Redis에 저장하여 빠른 접근을 보장합니다. (`RedisGameRepository`, `RedisRoomRepository`)
    - **실시간 메시징 (Pub/Sub)**: `RedisMessagePublisher`와 `RedisMessageSubscriber`를 통해 여러 클라이언트 또는 서버 인스턴스 간의 실시간 이벤트(예: 새로운 입찰, 게임 상태 변경)를 안정적으로 브로드캐스팅합니다.
    - **세션 및 상태 관리**: `RedisSessionManager`, `RedisRoomManager`, `RedisGameManager` 등은 사용자의 연결 상태, 방 정보, 게임 진행 상태를 Redis에서 관리하여 확장성 있는 구조를 만듭니다.

- **계층형 서비스 구조 (Layered Architecture)**:
    - `Controller` -> `Service` -> `Repository`의 명확한 계층 구조를 따릅니다.
    - `Controller`는 HTTP 요청 및 WebSocket 메시지를 받아 처리를 `Service`에 위임합니다.
    - `Service`는 비즈니스 로직을 수행하며, 데이터 영속성은 `Repository`를 통해 처리합니다.

## 4. 예상 동작 흐름

1.  클라이언트가 WebSocket으로 서버에 접속합니다. (`WebSocketConfig`, `RedisWebSocketHandler`)
2.  서버는 사용자 세션을 생성하고 Redis에 저장합니다. (`RedisSessionManager`)
3.  사용자는 방을 생성하거나 기존 방에 입장합니다. (`RoomController`, `RoomService`) 방의 상태는 Redis에서 관리됩니다. (`RedisRoomManager`)
4.  게임이 시작되면 `Game` 인스턴스가 생성되고, 게임의 상태(라운드, 페이즈)가 Redis에 저장됩니다. (`GameService`, `RedisGameManager`)
5.  사용자가 입찰(`Bid`)하면, 해당 이벤트는 `BidController`를 통해 처리되고, `RedisMessagePublisher`를 통해 같은 방의 모든 클라이언트에게 전파됩니다.
6.  각 클라이언트는 `RedisMessageSubscriber`를 통해 전달된 이벤트를 수신하여 UI를 업데이트합니다.

## 5. 결론

이 프로젝트는 Spring Boot의 안정적인 기반 위에 WebSocket과 Redis의 강력한 실시간 처리 능력을 결합하여 만든 **고성능 실시간 경매 애플리케이션**입니다. 구조적으로 각 기능이 명확하게 분리되어 있어 유지보수와 확장이 용이해 보입니다.
