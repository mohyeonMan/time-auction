### 미니 용어 사전

*   **도메인 (Domain)**: 관련된 업무 규칙과 데이터를 하나로 묶은 단위 (예: Room, Auction).
*   **이벤트 (Event)**: 시스템 내에서 발생하는 의미 있는 사건. 특정 동작의 결과로 발생하며, 다른 부분에 영향을 줍니다.
*   **퍼블리셔 (Publisher)**: 이벤트를 만들고, 메시지 브로커(RabbitMQ)를 통해 필요한 곳에 전달(발행)하는 역할.

### 전체 백로그 체크리스트

*   [ ] 1. 도메인 분석: room
    *   [ ] 1.1. 코드 읽기 및 Redis 기반 데이터 모델 분석
    *   [ ] 1.2. RabbitMQ를 포함한 이벤트 흐름 다이어그램 작성
*   [ ] 2. 공통 설계 원칙 추출
    *   [x] 2.1. 도메인 모델링 원칙 (Spring Data Redis)
    *   [x] 2.2. 서비스 레이어 역할 정의 (비즈니스 로직)
    *   [x] 2.3. 이벤트 기반 통신 패턴 (ApplicationEvent + RabbitMQ)
    *   [x] 2.4. WebSocket 엔드포인트 설계 (STOMP)
*   [ ] 3. `Game` 및 `Round` 도메인 구현
    *   [x] 3.1. `Game` 도메인 모델 정의 (@RedisHash)
    *   [x] 3.2. `Game` 레포지토리, 서비스 설계
    *   [x] 3.3. `Game` 이벤트 및 핸들러/퍼블리셔 설계
    *   [x] 3.4. `Game` 컨트롤러 및 WebSocket 엔드포인트 설계
*   [ ] 4. `Record` 도메인 구현 (`TimeStartLog`, `BidResult`)
    *   [x] 4.1. `Record` 도메인 모델 정의
    *   [x] 4.2. `Record` 레포지토리, 서비스 설계
    *   [x] 4.3. `Record` 이벤트 및 컨트롤러 설계
*   [ ] 5. `GameEntry` 및 게임 흐름 통합
    *   [x] 5.1. `GameEntry` 모델 설계 (Redis)
    *   [x] 5.2. 게임 상태 전이 로직 설계 (대기 -> 경매 -> 결과)
*   [ ] 6. 최종 통합 및 테스트
    *   [x] 6.1. 통합 테스트 시나리오 작성
    *   [ ] 6.2. API 문서화 (HTTP/WS)

---

### 다음 1개 단계 상세 계획

#### **1. 도메인 분석: room**

*   **목적**: Redis를 데이터 저장소로, RabbitMQ를 메시지 릴레이로 사용하는 `room` 도메인의 구조를 분석하여, 확장성 있는 실시간 애플리케이션의 공통 설계 원칙을 추출하기 위함입니다.
*   **산출물**: 분석 내용을 기반으로 팀 내부 공유용 설계 문서의 기반을 마련합니다. (별도 파일 생성 없음)
*   **수행 절차**:
    1.  `Room`, `RoomEntry` 모델 클래스에 `@RedisHash` 어노테이션과 키 구조가 어떻게 설정되어 있는지 분석합니다.
    2.  `RoomRepository` 구현체에서 `RedisTemplate` (예: `opsForHash`, `opsForValue`)을 어떻게 사용하여 데이터를 CRUD하는지 확인합니다.
    3.  `RoomService`가 비즈니스 로직을 처리하며 Redis 기반 레포지토리를 어떻게 호출하는지 분석합니다.
    4.  `RoomController`의 `@MessageMapping` 엔드포인트 역할을 파악합니다. (변경 없음)
    5.  `StompPublisher`가 이벤트를 RabbitMQ 토픽으로 발행(publish)하고, 이것이 어떻게 다른 서버 인스턴스와 클라이언트에게 브로드캐스팅되는지 전체 흐름을 추적합니다.
*   **인터페이스**:
    *   `WS /app/rooms`: 방 생성 (추정)
    *   `WS /app/rooms/{roomId}/enter`: 방 입장 (추정)
    *   `WS /topic/rooms/{roomId}`: 방 상태 구독 (추정)
*   **데이터 (Redis)**:
    *   `Room`: Key `rooms:{roomId}` (Hash) -> `{ id: ..., name: ..., ... }`
    *   `RoomEntry`: Key `room-entries:{roomId}` (Set 또는 Hash) -> `[userId1, userId2, ...]`
*   **수용 기준**:
    *   `Room` 객체가 Redis 내에서 어떤 Key와 자료구조로 저장되고 변경되는지 설명할 수 있습니다.
    *   `Controller`, `Service`, `Repository(RedisTemplate)`, `EventHandler`의 역할을 명확히 설명할 수 있습니다.
    *   특정 서버 인스턴스에서 발생한 이벤트가 RabbitMQ를 거쳐 다른 서버 인스턴스에 연결된 클라이언트에게까지 전달되는 과정을 설명할 수 있습니다.
*   **체크리스트**:
    *   [ ] `Room`, `RoomEntry` 모델의 `@RedisHash` 구조 및 키 전략 분석
    *   [ ] Repository 계층의 `RedisTemplate` 사용 방식 분석 (`opsForHash` 등)
    *   [ ] Service 비즈니스 로직과 Redis 데이터 조작 연관 관계 분석
    *   [ ] `RoomController`의 WebSocket 엔드포인트 역할 식별
    *   [ ] 이벤트 발행 시 RabbitMQ Relay를 통한 메시지 브로드캐스팅 흐름 추적
    *   [ ] 분석 내용을 기반으로 수정된 아키텍처 다이어그램 초안 작성