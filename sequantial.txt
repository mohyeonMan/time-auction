# 게임 흐름 순차 검증 계획 (sequantial.txt)

## 목표
- `rule.txt`에 명시된 게임 시퀀스를 따라가며, 현재 코드베이스의 각 컴포넌트가 올바르게 상호작용하는지 검증한다.
- 검증 과정에서 발견된 미구현 로직이나 빈틈을 식별하고 보완한다.

---

### 검증 순서 및 항목

**1. 방 참여 (Join Room)**
- **이벤트**: 클라이언트가 특정 방에 참여를 요청한다.
- **진입점**: `RoomController.joinRoom()`
- **검증 항목**:
    - [ ] `RoomController`가 `/room/join` 메시지를 받아 `RoomService.joinRoom`을 호출하는가?
    - [ ] `RoomService`에 `joinRoom` 메소드가 구현되어 있는가? (구현 필요 예상)
    - [ ] `joinRoom` 로직이 `RoomEntry`를 생성하고, Repository를 통해 저장하는가?

**2. 준비 (Ready)**
- **이벤트**: 클라이언트가 준비 완료 상태를 서버에 알린다.
- **진입점**: `RoomController.setReady()`
- **검증 항목**:
    - [ ] `RoomController`가 `/room/ready` 메시지를 받아 `RoomService.setReady`를 호출하는가?
    - [ ] `RoomService`에 `setReady` 메소드가 구현되어 있는가? (구현 필요 예상)
    - [ ] `setReady` 로직이 대상 유저의 `RoomEntry`를 찾아 `isReady` 상태를 변경하고 저장하는가?

**3. 게임 시작 (Game Start)**
- **이벤트**: 방장 또는 시스템이 게임 시작을 요청한다.
- **진입점**: `GameController.startGame()` -> `GameService.startGame()`
- **검증 항목**:
    - [ ] `GameService.startGame`이 `RoomService.getReadyUsers`를 호출하여 준비된 사용자 목록을 가져오는가? (`getReadyUsers` 구현 필요 예상)
    - [ ] `RecordService.createTimeWallets`를 호출하여 모든 참가자의 시간 지갑을 생성하는가?
    - [ ] `Game` 객체를 생성하고 Repository에 저장하는가?
    - [ ] 첫 라운드를 시작하기 위해 `startRound()`를 호출하는가?

**4. 라운드 참여 (Round Participation)**
- **이벤트**: 클라이언트가 현재 라운드에 참여할지 여부를 알린다.
- **진입점**: `RoomController.setParticipation()`
- **검증 항목**:
    - [ ] `RoomController`가 `/room/participate` 메시지를 받아 `RoomService.setParticipation`을 호출하는가?
    - [ ] `RoomService`에 `setParticipation` 메소드가 구현되어 있는가? (구현 필요 예상)
    - [ ] `GameService.startRound` 로직 내에서, 참여 여부 선택을 위한 3초 타이머와 참여하지 않은 유저를 제외하는 로직이 구현되어 있는가? (구현 필요 예상)

**5. 시간 집계 (Time Auction)**
- **이벤트**: 클라이언트가 시간 소모 시작/종료를 알린다.
- **진입점**: `RecordController.startRecord()`, `RecordController.endRecord()`
- **검증 항목**:
    - [ ] 각 컨트롤러 메소드가 `RecordService`의 해당 메소드를 잘 호출하는가?
    - [ ] `RecordServiceImpl`의 `startRecord`와 `endRecord` 로직이 `RoundRecord`와 `TimeWallet`을 올바르게 생성/수정하는가?
    - [ ] Repository를 통해 Redis에 정상적으로 저장되는가? (Spring Data가 처리)

**6. 라운드 정산 (Round Settle)**
- **이벤트**: `GameService`의 60초 라운드 타이머가 만료된다.
- **진입점**: `GameServiceImpl.endRound()`
- **검증 항목**:
    - [ ] `RecordService.getRoundResult`를 호출하여 라운드 기록을 가져오는가?
    - [ ] 기록을 바탕으로 승자를 정확히 판별하고, `TimeWallet`의 `roundWins`를 업데이트하는가?
    - [ ] 다음 라운드(`startRound`) 또는 게임 종료(`endGame`)를 올바르게 호출하는가?

**7. 게임 종료 (Game End)**
- **이벤트**: 마지막 라운드가 종료된다.
- **진입점**: `GameServiceImpl.endGame()`
- **검증 항목**:
    - [ ] `endGame` 메소드에 최종 승자 판정 로직이 구현되어 있는가? (규칙: `roundWins` > `timeLeft`) (구현 필요 예상)
    - [ ] 최종 게임 결과를 클라이언트에게 브로드캐스팅하는가?
